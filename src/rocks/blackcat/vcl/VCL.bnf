{
  parserClass="rocks.blackcat.vcl.parser.VCLParser"
  parserUtilClass="rocks.blackcat.vcl.parser.VCLParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="VCL"
  psiImplClassSuffix="Impl"
  psiPackage="rocks.blackcat.vcl.psi"
  psiImplPackage="rocks.blackcat.vcl.psi.impl"

  elementTypeHolderClass="rocks.blackcat.vcl.psi.VCLTypes"
  elementTypeClass="rocks.blackcat.vcl.psi.VCLElementType"
  tokenTypeClass="rocks.blackcat.vcl.psi.VCLTokenType"

  tokens=[
      SEMI=';'
      EQ='='
      LP='('
      RP=')'
      DOT='.'
      LC='{'
      RC='}'
      COMMA=','

      space='regexp:\s+'
      private whitespace='regexp:\s+'
      line_comment='regexp:(//|#).*'
      number='regexp:\d+(\.\d*)?'
      duration='regexp:\d+(\.\d*)?(ms|s|m|h|d|w|y)'
      private ip='regexp:"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b"'
      string="regexp:('([^'\\\n]|\\.)*'|\"([^\"\\\n]|\\.)*\")"
      //string="regexp:(\"([^\n\"]|.*)\"|'(.*|[^\n'])')"
      //private identifier='regexp:\p{Alpha}[\w-]*'
      property="regexp:(\.[a-zA-Z][a-zA-Z0-9_-.]*)"
      identifier="regexp:([a-zA-Z][a-zA-Z0-9_-.]*)"
      block_comment='regexp:/\*..*\*/'
      operator='regexp: \!=|\!\~|\~=|\!|\~|%|&&|&|==|\~|=|<=|>=|<<|>>|\*=|-=|\+=|/=|>|<|/|\+|\*|-|\|\|'

      L_CBRACE = 'C{'
      R_CBRACE = '}C'

      L_LSTRING = '{"'
      R_LSTRING = '"}'

      keyword_sub='sub'
      keyword_acl='acl'
      keyword_set='set'
      keyword_backend='backend'
      keyword_import='import'
      keyword_if = 'if'
      keyword_else = 'else'
      keyword_elif = 'elif'
      keyword_elsif = 'elsif'
      keyword_elseif = 'elseif'
      keyword_return = 'return'
      keyword_unset = 'unset'
      keyword_new = 'new'
      keyword_include = 'include'
      keyword_remove = 'remove'
      //keyword_purge = 'purge' //It can't be a keyword as it's not restricted
      keyword_error = 'error'
      keyword_director = 'director'
      keyword_probe = 'probe'
      keyword_synthetic = 'synthetic'
    ]

    name("ACL")='keyword'
    extends("keyword_.*")=keyword
  }

//  literal_expr ::= number | string | float
  root ::= [VERSION] (ACL | SUB | IMPORT | BACKEND | PROBE | INCLUDE | INLINE_C | DIRECTOR)*

  VERSION ::= 'vcl' number ';'
  IMPORT ::= 'import' identifier ';'
  INCLUDE ::= 'include' STRINGS ';'

  PROBE ::= keyword_probe identifier '{' PROBE_INTERNAL '}'
  ACL ::= 'acl' identifier '{'ACL_ENTRY'}'
  ACL_ENTRY ::= (ACL_PART ';' | BLANK) *
  ACL_PART  ::= ['!'] ( NETMASK | string [])
  NETMASK ::= string '/' number
  SUB ::= 'sub' identifier COMPOUND
  //private not_sub ::= ! RC

  COMPOUND ::= '{' STATEMENT '}' //{pin=1  recoverWhile=rc_recover}
  //private rc_recover ::= !(RC)

  STATEMENT ::= (COMPOUND | IF_STATEMENT | INLINE_C | ACTION ';' | INCLUDE) *
  ACTION ::= SYNTHETIC | F_CALL | SET | UNSET | CALL | PURGE | NEW  | ERROR | RETURN
  ERROR ::= 'error' number (OPERATION) //{pin=1 recoverWhile=semi_recover}
  BUITLIN ::= RETURN | ERROR
  F_CALL ::= (OBJECT ) '(' [OPERATION [ (',' OPERATION ) *]] ')'
  //SYNTH ::= 'synth('number','STRINGS')'
  PURGE ::= 'purge'
  NEW ::= keyword_new OBJECT '=' OPERATION
  CALL ::= 'call' OBJECT
  SET ::= 'set' VARIABLE '=' (OPERATION)
  UNSET ::= ('unset' | 'remove') VARIABLE
  SYNTHETIC ::= 'synthetic' (STRINGS | '(' STRINGS')') //Can't find a simple way to deal with it right now

  INLINE_C ::= 'C{' C_CONTENT '}C' {implements="rocks.blackcat.vcl.psi.VCLInlineCMixin"}

  LONG_STRING ::= '{"' STRING_CONTENT '"}' //{pin=1}
  STRINGS ::= STRINGS_INTERNAL [(['+'] STRINGS_INTERNAL) *] {implements="rocks.blackcat.vcl.psi.VCLStringMixin"}
  STRINGS_INTERNAL ::= string | LONG_STRING | F_CALL| OBJECT
  IF_STATEMENT ::= 'if' IF_INTERAL
  private IF_INTERAL ::= CONDITION COMPOUND [ELSE]//{pin=1 recoverWhile=rc_recover}
  ELSE ::= ('else' (COMPOUND | IF_STATEMENT)) | ('elif' | 'elseif'| 'elsif') IF_INTERAL
  CONDITION ::= '(' EXPRESSION ')'
  EXPRESSION ::= ('!' '(' EXPRESSION ')' |CONDITION | F_CALL | OPERATION | VARIABLE | 'true' | 'false' ) [('&&' | '||' EXPRESSION) ]
  OPERATION ::= OPERATION_INTERNAL [([operator *] OPERATION_INTERNAL) *]
  OPERATION_INTERNAL ::= '(' OPERATION ')'| VALUE
  VALUE ::= ['!'] (F_CALL|LITERAL|VARIABLE)
  //OPERATOR ::='!'|'%'|'&'|'+'|'*'|'-'|'\/'|'<'|'='|'>'|'~'|'=='|'<='
    //            |'>='|'<<'|'>>'|'*='|'-='|'+='|'\/='
  LITERAL ::= NETMASK | STRINGS | number | identifier | OBJECT | duration
  OBJECT ::= identifier ['DOT' identifier]

  F_SYNTH ::= 'synth(' number ',' STRINGS ')'

  DIRECTOR ::= keyword_director identifier identifier '{' [ ('{' OBJECT_INTERNAL *'}' | OBJECT_INTERNAL) *]'}'
  BACKEND ::= 'backend' identifier '{' [OBJECT_INTERNAL *] '}'

  OBJECT_INTERNAL ::= (VALUE ';'| ((property|identifier) '=' (VALUE ';'| '{' OBJECT_INTERNAL * '}')))

  RETURN ::= 'return' '('( F_SYNTH | identifier ) ')'

  //VARIABLES
  VARIABLE ::= BEREQ | BERESP | CLIENT | LOCAL | NOW | OBJ | REMOTE | REQ
                | REQ_TOP | RESP | SERVER | STORAGE |  OBJECT
  //FOO ::= 'req.url'*/
  BEREQ ::= 'bereq'  ['.'   ('backend' | 'between_bytes_timeout' | 'body' | 'connect_timeout'
                            | 'first_byte_timeout' | HEADER | 'method' | 'proto'
                            | 'retries' |'uncacheable' | 'url' | 'xid'
                            )]
  BERESP ::= 'beresp' ['.' ('age' | 'backend' | 'backend.ip' | 'backend.name' | 'body'
                            | 'do_esi' | 'do_gunzip' | 'do_gzip' | 'do_stream'
                            | 'grace' | HEADER | 'keep' | 'proto' | 'reason' | 'status'
                            | 'storage_hint' | 'ttl' | 'uncacheable' | 'was_304'
                       )]
  CLIENT ::= 'client.' ('identity' | 'ip')
  LOCAL  ::= 'local.ip'
  NOW ::= 'now'
  OBJ ::= 'obj.' ('age' | 'grace' | 'hits' | HEADER | 'keep' | 'proto' | 'reason'
                    | 'status' | 'ttl' | 'uncacheable')
  REMOTE ::= 'remote.ip'
  REQ ::= 'req' ['.' ( 'backend_hint' | 'can_gzip' | 'esi' | 'esi_level'
                          | 'hash_always_miss' | 'hash_ignore_busy' | HEADER | 'method'
                          | 'proto' | 'restarts' | 'ttl' | 'url' | 'xid'
                      )]
  REQ_TOP ::= 'req_top.' (HEADER | 'method' | 'proto' | 'url')
  RESP ::= 'resp' | 'resp.' ('body' | HEADER | 'is_streaming' | 'reason' | 'status')
  SERVER ::= 'server.' ('hostname' | 'identity' | 'ip')
  STORAGE ::= 'storage.' identifier '.' ('free_space' | 'used_space' | 'happy')
  HEADER ::= OBJECT //'http.' identifier

  //RETURN ::= 'return' '('('fail' | 'pipe' | 'restart' | 'pass' | F_SYNTH) ')'

  /*BACKEND_INTERNAL ::= '.host' '=' STRINGS ';'
                        | '.port' '=' STRINGS ';'
                        |  '.max_connections' '=' number ';'
                        |  '.first_byte_timeout' '=' duration ';'
                        |  '.connect_timeout' '=' duration ';'
                        |  '.between_bytes_timeout'  '=' duration ';'
                        | BACKEND_PROBE
  BACKEND_PROBE ::= '.probe' '=' '{' PROBE_INTERNAL * '}'*/
  PROBE_INTERNAL ::= ('.url' '=' STRINGS ';'
                     | '.timeout' '=' duration ';'
                     | '.interval' '=' duration ';'
                     | '.window' '=' number ';'
                     | '.threshold' '=' number ';'
                     | '.request' '=' STRINGS * ';'
                     | '.expected_response' '=' number ';'
                     | '.initial' '=' number ';')+
  /*DIRECTOR_ENTRY ::= (property|identifier) '=' (VALUE ';'| BACKEND_INTERNAL | '{' DIRECTOR_ENTRY'}')*/
  //private semi_recover ::= !(SEMI);

